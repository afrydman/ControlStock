using System;
using System.Collections.Generic;
using System.Linq;
using Dapper;
using DTO;
using DTO.BusinessEntities;
using Repository.AdministracionRepository;
using Repository.ConnectionFactoryStuff;

namespace Repository.Repositories.AdministracionRepository
{
    public class IngresoRepository : DbRepository,IIngresoRepository
    {
        public IngresoRepository(bool local=true) : base(local)
        {
        }

         public override string DEFAULT_SELECT
        {
            get { return @" ingresos.*,
                locales.*,
		        Personal.*,
		        tipoingreso.* FROM [dbo].[Ingresos]

                Inner join locales on ingresos.idlocal=locales.id
                inner join Personal on ingresos.idpersonal= Personal.id
                inner join tipoingreso on ingresos.idtiporetiro = tipoingreso.id"; }
        }

        



        public bool Insert(IngresoData theObject)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                        var sqlEnvio = @"INSERT INTO ingresos
                   ([Local]
                   ,[idPersonal]
                   ,[Date]
                   ,[Monto]
                   ,[codigo]
                   ,[fechaUso]
			        ,[idTipoRetiro]
			        ,[Description],id,Enable,modificado,Numero,Prefix)
             VALUES
                   (@Local
                   ,@idPersonal
                   ,@Date
                   ,@Monto
                   ,@codigo
                   ,@fechauso,
                   @idTipo,@desc,@id,@Enable,'0',@Numero,@Prefix);
                    SELECT @@ROWCOUNT;";
                        return con.QueryFirstOrDefault<int>(sqlEnvio, new
                        {
                            idLocal=theObject.Local.ID,
                            idPersonal = theObject.Personal.ID,
                            Date = theObject.Date,
                            monto = theObject.Monto,
                            codigo=theObject.codigo,
                            fechauso= theObject.fechaUso,
                            idTipo=theObject.TipoIngreso.ID,
                            desc=theObject.Description,
                            id=theObject.ID,
                            enable=theObject.Enable,
                            numero=theObject.Numero,
                            prefix=theObject.Prefix
                        }) > 0;

            }
        }

        public bool Update(IngresoData theObject)
        {
            throw new NotImplementedException();
        }

        public bool Disable(Guid idObject)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                var sql = @"update 
                    ingresos set Enable = '0'
                        ,modificado= '1'
	                    Where
                        id = @id;
                        SELECT @@ROWCOUNT;";
                return con.QueryFirstOrDefault<int>(sql, new
                {
                    id = idObject
                })>0;
            }
        }

        public bool Enable(Guid idObject)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                var sql = @"update 
                    ingresos set Enable = '1'
                        ,modificado= '1'
	                    Where
                        id = @id;
                        SELECT @@ROWCOUNT;";
                return con.QueryFirstOrDefault<int>(sql, new
                {
                    id =idObject
                }) > 0;
            }
        }

        public List<IngresoData> GetAll()
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                var sql = "select "+DEFAULT_SELECT;
                IEnumerable<IngresoData> resultado = con.Query<IngresoData, LocalData, PersonalData, tipoIngresoData, IngresoData>(sql, (retiro, local, personal, tipo) =>
                {
                    retiro.Local = local;
                    retiro.Personal = personal;
                    retiro.TipoIngreso = tipo;
                    return retiro;
                });
                return resultado.ToList();
            }
        }

        public IngresoData GetByID(Guid idObject)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                IngresoData aux =  con.Query<IngresoData,LocalData,PersonalData,tipoIngresoData,IngresoData>(
            @"SELECT "+DEFAULT_SELECT+@"
            Where ingresos.id= @id ", (retiro, local,personal , tipo) =>
                {
                    retiro.Local = local;
                    retiro.Personal = personal;
                    retiro.TipoIngreso = tipo;
                    return retiro;
                },new { id = idObject }).FirstOrDefault();

                return aux ?? new IngresoData();
            }
        }

        public IngresoData GetLast(Guid idLocal, int first)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                return
                    con.Query<IngresoData, LocalData, PersonalData, tipoIngresoData, IngresoData>(
                        "select top 1 " + DEFAULT_SELECT + @"  where ingresos.Local = @id and ingresos.Prefix = @Prefix order by ingresos.Numero desc  ",(retiro, local,personal , tipo) =>
                {
                    retiro.Local = local;
                    retiro.Personal = personal;
                    retiro.TipoIngreso = tipo;
                    return retiro;
                },
                        new {id = idLocal, prefix = first}).FirstOrDefault()??new IngresoData();
            }
        }

        public List<IngresoData> GetModified(Guid idLocal,int first)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                var sql = "select " + DEFAULT_SELECT + @"  ingresos.modificado = '1' and ingresos.Local = @id and ingresos.Prefix=@Prefix";
                IEnumerable<IngresoData> resultado = con.Query<IngresoData, LocalData, PersonalData, tipoIngresoData, IngresoData>(sql, (retiro, local, personal, tipo) =>
                {
                    retiro.Local = local;
                    retiro.Personal = personal;
                    retiro.TipoIngreso = tipo;
                    return retiro;
                }, new {id=idLocal,prefix =first});
                return resultado.ToList();
            }
        }

        public bool MarkSeen(Guid idLocal,int prefix)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                var sql = @"update ingresos set modificado = '0' where Local = @id and Prefix=@Prefix; 
                        SELECT @@ROWCOUNT;";
                return con.Query<int>(sql, new
                {
                    id = idLocal,prefix=prefix
                }).FirstOrDefault() > 0;
            }
        }

        public List<IngresoData> GetByRangoFecha(DateTime fecha1, DateTime fecha2, Guid idLocal, int Prefix)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {

                var sql = @"SELECT " + DEFAULT_SELECT + @"
                            
	                        Where
<<<<<<< HEAD
                            ingresos.Local = @id and ingresos.fechaUso>=@fechaAyer and ingresos.fechaUso<=@fechaManana";
=======
                            ingresos.idLocal = @id and ingresos.Date>=@fechaAyer and ingresos.Date<=@fechaManana";
>>>>>>> 5ba60578442e905f4bd4b30f7e9aae264ab810e0

                IEnumerable<IngresoData> resultado = con.Query<IngresoData,LocalData,PersonalData,tipoIngresoData,IngresoData>(sql, (retiro, local, personal, tipo) =>
                {
                    retiro.Local = local;
                    retiro.Personal = personal;
                    retiro.TipoIngreso = tipo;
                    return retiro;
                }, new { id = idLocal, fechaAyer = fecha1, fechaManana = fecha2 });
                return resultado.ToList();
            }
        }

        public List<IngresoData> GetBiggerThan(int ultimo, Guid idLocal, int prefix)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
                var sql = @"select " + DEFAULT_SELECT + @" where ingresos.Numero > @ultimo and ingresos.idLocal = @idlocal and ingresos.Prefix = @Prefix";

                IEnumerable<IngresoData> resultado = con.Query<IngresoData, LocalData, PersonalData, tipoIngresoData, IngresoData>(sql, (retiro, local, personal, tipo) =>
                {
                    retiro.Local = local;
                    retiro.Personal = personal;
                    retiro.TipoIngreso = tipo;
                    return retiro;
                }, new { idlocal = idLocal, Prefix = prefix, ultimo = ultimo });
                return resultado.ToList();
            }
        }

        public List<IngresoData> GetOlderThan(DateTime ultimo, Guid idLocal, int prefix)
        {
            using (var con = ConnectionFactory.CreateConnection(_connectionString))
            {
<<<<<<< HEAD
                var sql = @"select " + DEFAULT_SELECT + @" where Date > @fecha and Local = @idlocal and Prefix = @Prefix";
=======
                var sql = @"select " + DEFAULT_SELECT + @" where ingresos.Date > @fecha and ingresos.idLocal = @idlocal and ingresos.Prefix = @Prefix";
>>>>>>> 5ba60578442e905f4bd4b30f7e9aae264ab810e0

                IEnumerable<IngresoData> resultado = con.Query<IngresoData, LocalData, PersonalData, tipoIngresoData, IngresoData>(sql, (retiro, local, personal, tipo) =>
                {
                    retiro.Local = local;
                    retiro.Personal = personal;
                    retiro.TipoIngreso = tipo;
                    return retiro;
                }, new { idLocal = idLocal, prefix = prefix, fecha = ultimo });
                return resultado.ToList();
            }
        }


       
    }
}

