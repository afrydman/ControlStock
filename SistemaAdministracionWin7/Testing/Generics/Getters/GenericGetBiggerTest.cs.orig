using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using DTO.BusinessEntities;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ploeh.AutoFixture;
using Repository;
using Repository.Repositories.NotasRepository;
using Services;
using Services.AbstractService;
using Services.ComprasProveedorService;
using Services.IngresoService;
<<<<<<< HEAD
=======
using Services.MovimientoCuentaService;
>>>>>>> 5ba60578442e905f4bd4b30f7e9aae264ab810e0
using Services.NotaService;
using Services.OrdenPagoService;
using Services.ReciboService;
using Services.RemitoService;
using Services.RetiroService;
using Services.ValeService;
using Services.VentaService;

namespace Testing.Generics
{

    [TestClass()]
    public class GenericGetBiggerTest
    {
        Fixture fixture = new Fixture();

        
        [TestMethod]
        public void VentaService_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList);
            GetBiggerDocumentoGeneralData(new VentaService(), difExpected: 0);// se espera que falle pagos..
        }

        
        [TestMethod]
        public void RemitoService_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList);
            GetBiggerDocumentoGeneralData(new RemitoService(), difExpected: 0);// se espera que falle pagos..
        }


        [TestMethod]
        public void ReciboService_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList);
            GetBiggerDocumentoGeneralData(new ReciboService(), difExpected: 0);// se espera que falle pagos..
        }


        [TestMethod]
        public void OPagoService_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList);
            GetBiggerDocumentoGeneralData(new OrdenPagoService(), difExpected: 0);// se espera que falle pagos..
        }


        [TestMethod]
        public void NotaCreditoCliente_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList);
            GetBiggerDocumentoGeneralData(new NotaService(new NotaCreditoClienteRepository(), new NotaCreditoClienteDetalleRepository()), difExpected: 0);// se espera que falle pagos..
        }

        [TestMethod]
        public void NotaCreditoProveedor_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList, false);
            GetBiggerDocumentoGeneralData(new NotaService(new NotaCreditoProveedoresRepository(), new NotaCreditoProveedoresDetalleRepository()), difExpected: 0);// se espera que falle pagos..
        }

        [TestMethod]
        public void NotaDebitoCliente_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList);
            GetBiggerDocumentoGeneralData(new NotaService(new NotaDebitoClienteRepository(), new NotaDebitoClienteDetalleRepository()), difExpected: 0);// se espera que falle pagos..
        }

        [TestMethod]
        public void NotaDebitoProveedor_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList,false);
            GetBiggerDocumentoGeneralData(new NotaService(new NotaDebitoProveedoresRepository(), new NotaDebitoProveedoresDetalleRepository()), difExpected: 0);// se espera que falle pagos..
        }


        [TestMethod]
        public void ComprasProveedor_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList, false);
            GetBiggerDocumentoGeneralData(new ComprasProveedorService(), difExpected: 0);// se espera que falle pagos..
        }

<<<<<<< HEAD
        [TestMethod]
        public void IngresoService_GetBIgger()
=======

        [TestMethod]
        public void Retiros_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList, false);
            GetBigger(service: new RetiroService(), difExpected: 0);// se espera que falle pagos..
        }


        [TestMethod]
        public void Ingresos_GetBIgger()
>>>>>>> 5ba60578442e905f4bd4b30f7e9aae264ab810e0
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList, false);
            GetBigger(service: new IngresoService(), difExpected: 0);// se espera que falle pagos..
        }

<<<<<<< HEAD
        //IGenericServiceGetter<X>



        private void GetBigger<X, Y, A, B>(FatherService<X, Y, A, B> service, int difExpected = 0)

            where X : DocumentoGeneralData<Y>
            where Y : ChildData
            where A : IGenericFatherRepository<X>
            where B : IGenericChildRepository<Y>
=======
        [TestMethod]
        public void Vale_GetBIgger()
        {
            List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
            testList.Add(HelperTesting.ServicesEnum.Codigo);
            fixture = HelperTesting.SetUp(testList, false);
            GetBigger(service: new ValeService(), difExpected: 0);// se espera que falle pagos..
        }

        // [TestMethod]
        //public void MovimientoCuenta_GetBIgger()
        //{
        //    List<HelperTesting.ServicesEnum> testList = new List<HelperTesting.ServicesEnum>();
        //    testList.Add(HelperTesting.ServicesEnum.Codigo);
        //    fixture = HelperTesting.SetUp(testList, false);
        //    GetBigger(service: new MovimientoCuentaService(), difExpected: 0);// se espera que falle pagos..
        //}


        private void GetBigger<X, Y>(ObjectGetterService<X, Y> service, int difExpected = 0)

            where X : MovimientoEnCajaData

            where Y : IGenericGetterRepository<X>
>>>>>>> 5ba60578442e905f4bd4b30f7e9aae264ab810e0
        {

            LocalData local = fixture.Create<LocalData>();
            int prefix = 1;
            int numero1 = 1;
            int numero5 = 5;
            int numero10 = 10;


            X object1 = fixture.Create<X>();
            X object2 = fixture.Create<X>();



            var opts = new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted
            };

            using (var trans = new TransactionScope(TransactionScopeOption.Required, opts))
            {

                object1.Local = local;
<<<<<<< HEAD
                object1.prefix = prefix;
                object1.Numero = numero5;

                object2.Local = local;
                object2.prefix = prefix;
=======
                object1.Prefix = prefix;
                object1.Numero = numero5;

                object2.Local = local;
                object2.Prefix = prefix;
>>>>>>> 5ba60578442e905f4bd4b30f7e9aae264ab810e0
                object2.Numero = numero10;


                bool task = service.Insert(object1);

                Assert.IsTrue(task);

                List<X> itemsBIggersNullexpected = service.GetBiggerThan(numero10, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected == null || itemsBIggersNullexpected.Count == 0);



                task = service.Insert(object2);

                Assert.IsTrue(task);

                itemsBIggersNullexpected = service.GetBiggerThan(numero10, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected == null || itemsBIggersNullexpected.Count == 0);

                itemsBIggersNullexpected = service.GetBiggerThan(numero5, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected != null && itemsBIggersNullexpected.Count == 1);

                itemsBIggersNullexpected = service.GetBiggerThan(numero1, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected != null && itemsBIggersNullexpected.Count == 2);

            }
<<<<<<< HEAD


        }



        private void GetBigger<X, Y, A, B>(FatherService<X, Y, A, B> service, int difExpected = 0)
=======
        }

        private void GetBiggerDocumentoGeneralData<X, Y, A, B>(FatherService<X, Y, A, B> service, int difExpected = 0)
>>>>>>> 5ba60578442e905f4bd4b30f7e9aae264ab810e0
            
            where X : DocumentoGeneralData<Y>
            where Y : ChildData
            where A : IGenericFatherRepository<X>
            where B : IGenericChildRepository<Y>
        {

            LocalData local = fixture.Create<LocalData>();
            int prefix = 1;
            int numero1 = 1;
            int numero5 = 5;
            int numero10 = 10;


            X object1 = fixture.Create<X>();
            X object2 = fixture.Create<X>();



            var opts = new TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted
            };

            using (var trans = new TransactionScope(TransactionScopeOption.Required, opts))
            {

                object1.Local = local;
                object1.Prefix = prefix;
                object1.Numero = numero5;

                object2.Local = local;
                object2.Prefix = prefix;
                object2.Numero = numero10;


                bool task = service.Insert(object1);

                Assert.IsTrue(task);

                List<X> itemsBIggersNullexpected = service.GetBiggerThan(numero10, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected == null || itemsBIggersNullexpected.Count == 0);



                task = service.Insert(object2);

                Assert.IsTrue(task);

                itemsBIggersNullexpected = service.GetBiggerThan(numero10, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected == null || itemsBIggersNullexpected.Count == 0);

                itemsBIggersNullexpected = service.GetBiggerThan(numero5, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected != null && itemsBIggersNullexpected.Count == 1);

                itemsBIggersNullexpected = service.GetBiggerThan(numero1, local.ID, prefix, false);

                Assert.IsTrue(itemsBIggersNullexpected != null && itemsBIggersNullexpected.Count == 2);

            }

          
        }
    }
}
